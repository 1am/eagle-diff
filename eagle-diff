#!/usr/bin/env python2

"""
eagle-diff: show differences between Cadsoft Eagle PCB layouts
"""

__version__ = "0.1.0"


import argparse
import errno
import itertools
import os
import shutil
import subprocess
import sys
import tempfile

from PIL import Image, ImageChops, ImageColor, ImageEnhance, ImageOps


LAYER_NAMES = {key: value.lower() for (key, value) in {
   1: "Top",
   2: "Route2", 3: "Route3", 4: "Route4", 5: "Route5", 6: "Route6", 7: "Route7", 8: "Route8", 9: "Route9",
  10: "Route10", 11: "Route11", 12: "Route12", 13: "Route13", 14: "Route14", 15: "Route15",
  16: "Bottom",
  17: "Pads", 18: "Vias",
  19: "Unrouted",
  20: "Dimension",
  21: "tPlace", 22: "bPlace",
  23: "tOrigins", 24: "bOrigins",
  25: "tNames", 26: "bNames",
  27: "tValues", 28: "bValues",
  29: "tStop", 30: "bStop",
  31: "tCream", 32: "bCream",
  33: "tFinish", 34: "bFinish",
  35: "tGlue", 36: "bGlue",
  37: "tTest", 38: "bTest",
  39: "tKeepout", 40: "bKeepout",
  41: "tRestrict", 42: "bRestrict", 43: "vRestrict",
  44: "Drills", 45: "Holes", 46: "Milling",
  47: "Measures", 48: "Document", 49: "Reference",
  51: "tDocu", 52: "bDocu"
}.iteritems()}

LAYER_NUMBERS = {
    value: key for (key, value) in LAYER_NAMES.iteritems()
}


class View(object):

    def __init__(self, name, dpi, diff, diff_bg, rats, layers):
        self.name = name
        self.dpi = dpi
        self.diff = diff
        self.diff_bg = diff_bg
        self.rats = rats
        self.layers = filter(None, layers.lower().split(" "))

    def get_commands(self, directory, index):
        return [
            "disp none " + " ".join(str(LAYER_NUMBERS[layer]) for layer in self.layers),
            "rats;" if self.rats else "rip @;",
            "export image %s %i" % (self.get_path(directory, index), self.dpi),
            "undo"
        ]

    def get_path(self, directory, index):
        return os.path.join(directory, "%s.%s.png" % (self.name, index))

    def get_bg_path(self, directory, index):
        if self.diff_bg:
            return self.diff_bg.get_path(directory, index)


def run(file1, file2, temp_dir, out_dir, dpi, eagle):

    # Define views
    default_top = View(name="default-top", dpi=dpi, diff=0, diff_bg=None, rats=1, layers="Top Pads Vias Dimension tPlace tOrigins tNames Milling tDocu")
    default_bottom = View(name="default-bottom", dpi=dpi, diff=0, diff_bg=None, rats=1, layers="Bottom Pads Vias Dimension bPlace bOrigins bNames Milling bDocu")
    copper_top = View(name="copper-top", dpi=dpi, diff=1, diff_bg=default_top, rats=0, layers="Top Pads Vias Dimension")
    copper_bottom = View(name="copper-bottom", dpi=dpi, diff=1, diff_bg=default_bottom, rats=0, layers="Bottom Pads Vias Dimension")
    dimension = View(name="dimension", dpi=dpi, diff=0, diff_bg=None, rats=0, layers="Dimension")
    views = [default_top, default_bottom, copper_top, copper_bottom] # not including dimension layer view

    # Export images
    for i, file in enumerate((file1, file2), 1):
        nested = [view.get_commands(temp_dir, i) for view in views + [dimension]]
        flat = [cmd for cmds in nested for cmd in cmds]
        subprocess.call([eagle, "-C", ";".join(flat + ["quit"]), file])

    # Determine PCB dimensions
    alignment_data = {}
    largest_L = 0
    largest_T = 0
    largest_R = 0
    largest_B = 0
    largest_W = 0
    largest_H = 0
    for i, file in enumerate((file1, file2), 1):
        img = Image.open(dimension.get_path(temp_dir, i))
        L, T, R, B = img.getbbox()
        W, H = img.size
        alignment_data[file] = L, T, R, B, W, H
        if L > largest_L: largest_L = L
        if R > largest_R: largest_R = R
        if T > largest_T: largest_T = T
        if B > largest_B: largest_B = B
        if W > largest_W: largest_W = W
        if H > largest_H: largest_H = H

    # Align images
    for i, file in enumerate((file1, file2), 1):
        L, T, R, B = img.getbbox()
        W, H = img.size

        for view in views:
            src_img = Image.open(view.get_path(temp_dir, i))
            dst_img = Image.new("RGB", (largest_W, largest_H), (0, 0, 0))
            dst_img.paste(src_img, box=(largest_L - L, largest_T - T))
            dst_img.save(view.get_path(temp_dir, i))

    # Generate diffs
    for view in views:
        if view.diff:
            diff(
                Image.open(view.get_path(temp_dir, 1)),
                Image.open(view.get_path(temp_dir, 2))
            ).save(view.get_path(temp_dir, "diff"), "PNG")
        if view.diff and view.diff_bg:
            diff(
                Image.open(view.get_path(temp_dir, 1)),
                Image.open(view.get_path(temp_dir, 2)),
                Image.open(view.get_bg_path(temp_dir, 1))
            ).save(view.get_path(temp_dir, "diff_bg"), "PNG")

    # Move to output directory
    for view in views:
        shutil.move(view.get_path(temp_dir, 1), view.get_path(out_dir, 1))
        shutil.move(view.get_path(temp_dir, 2), view.get_path(out_dir, 2))
        if view.diff:
            shutil.move(view.get_path(temp_dir, "diff"), view.get_path(out_dir, "diff"))
        if view.diff and view.diff_bg:
            shutil.move(view.get_path(temp_dir, "diff_bg"), view.get_path(out_dir, "diff_bg"))


def diff(image1, image2, background=None):
    image1_gray = ImageOps.grayscale(image1)
    image2_gray = ImageOps.grayscale(image2)

    black = ImageChops.constant(image1_gray, "#000000")

    image1_mask = image1_gray.point(lambda v: 255 if v > 0 else 0) # pixel in image1
    image2_mask = image2_gray.point(lambda v: 255 if v > 0 else 0) # pixel in image2
    image_bg_mask = ImageChops.multiply(image1_mask, image2_mask) # pixel in both images
    image_fg_mask = ImageChops.invert(image_bg_mask) # pixel in neither image

    add_mask = ImageChops.subtract(image2_mask, image1_mask) # pixel not in image1 but in image2
    del_mask = ImageChops.subtract(image1_mask, image2_mask) # pixel in image1 but not in image2
    mod_mask = ImageChops.lighter(add_mask, del_mask) # pixel in image1 xor in image2
    unmod_mask = ImageChops.invert(mod_mask) # pixel in both or neither images

    add_image = ImageOps.colorize(add_mask, "#000000", "#00ff00") # green
    del_image = ImageOps.colorize(del_mask, "#000000", "#ff0000") # red

    bg_image = ImageChops.multiply(unmod_mask.convert("RGB"), background if background else image1).convert("RGB")
    bg_image = ImageChops.blend(black.convert("RGB"), bg_image, 0.8) # reduce background brightness
    bg_image = ImageEnhance.Color(bg_image).enhance(0.2) # ...and colorfulness (not exactly saturation)

    diff_image = ImageChops.lighter(ImageChops.lighter(add_image, del_image), bg_image)

    return diff_image


def main(args):

    # Argument parsing
    par = argparse.ArgumentParser(
        description='Show differences between Cadsoft Eagle files')
    par.add_argument('-V', '--version', action='version', version=__version__)
    par.add_argument('-d', '--dpi', type=int, default=600,
        help="resolution of the generated images (default: %(default)s)")
    par.add_argument('--eagle', default="eagle",
        help="eagle binary to use (default: %(default)s)")
    par.add_argument('file1', type=os.path.abspath,
        help="'old' version of the .brd file")
    par.add_argument('file2', type=os.path.abspath,
        help="'new' version of the .brd file")
    par.add_argument('output', nargs="?", default="eagle_diff",
        help="output directory (will be created; default: %(default)s)")
    args = par.parse_args()

    # Check arguments
    if not 1 <= args.dpi <= 2400: # eagles limit
        par.error("dpi not in range 1..2400")
    if not os.path.isfile(args.file1):
        par.error("no such file: %s" % args.file1)
    if not os.path.isfile(args.file2):
        par.error("no such file: %s" % args.file2)
    if os.path.exists(args.output):
        par.error("output directory exists already")
    try:
        os.mkdir(args.output)
    except OSError, e:
        par.error("failed to create output directory: %s" % e.strerror)

    # Provide a temporary directory
    try:
        temp_dir = tempfile.mkdtemp()
        run(args.file1, args.file2, temp_dir, args.output, args.dpi, args.eagle)
    finally:
        try:
            shutil.rmtree(temp_dir)
        except UnboundLocalError, e:
            pass # when mkdtemp() fails
        except OSError as e:
            # ignore "No such file or directory"
            if e.errno == errno.ENOENT:
                raise


if __name__ == "__main__":
    main(sys.argv)

